# This workflow uses terraform to creaet S3 bucket and Dynamodb
# Then deploys lamda to S3 as zip package artifacts 
# Then uses AWS SAM / Cloudfront to deploy lambda and API Gateway 

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
            
      # Run tests
      - name: Run our "test.py" file
        working-directory: ./assignment_lambda
        run: python test.py
      - name: Job Status
        run: echo "This jobs status is ${{ job.status }}."
        
      # Run linters
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: flake8 ./assignment_lambda --ignore=E501
      - name: Code safety with bandit
        run: bandit -r ./assignment_lambda
      - name: Code safety with Safety
        run: safety check -r requirements.txt
      - name : Lint with pylint
        run: pylint ./assignment_lambda --disable=W0703,W0612
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install terraform
      env: 
          terraform_version: "1.0.3"
      run: |
        tf_version=$terraform_version
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Verify Terraform version
      run: terraform --version

    - name: Terraform init
      env:
        TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_secret_token: ${{ secrets.AWS_SESSION_TOKEN }}
      working-directory: ./terraform-app
      run: terraform init -input=false

    - name: Terraform validation
      working-directory: ./terraform-app
      run: terraform validate

    - name: Terraform apply
      env:
        TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_secret_token: ${{ secrets.AWS_SESSION_TOKEN }}
      working-directory: ./terraform-app
      run: terraform apply -auto-approve -input=false

